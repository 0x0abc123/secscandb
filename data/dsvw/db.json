{"b9b7de8edb64cb3b86e011728a20432535ac3b7c72d0bd7da609e171addd8ed5":"{\"title\": \"missing-user\", \"loc\": \"Dockerfile:16\", \"severity\": \"error\", \"details\": \"dockerfile.security.missing-user.missing-user\\nBy not specifying a USER, a program in the container may run as 'root'. This is a security hazard. If an attacker can control a process running as root, they may have control over the container. Ensure that the last USER in a Dockerfile is a USER other than 'root'.\\nSnippet:\\nCMD [\\\"python3\\\", \\\"dsvw.py\\\"]\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","f7cc40d4600423d374260750d0e6936cec5dbb21fcd5c55fd394dd984d02f97e":"{\"title\": \"avoid-pickle\", \"loc\": \"dsvw.py:12\", \"severity\": \"warning\", \"details\": \"python.lang.security.deserialization.pickle.avoid-pickle\\nAvoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nSnippet:\\nCASES = ((\\\"Blind SQL Injection (<i>boolean</i>)\\\", \\\"?id=2\\\", \\\"/?id=2%20AND%20SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C1%2C1)%3D%277%27\\\\\\\" onclick=\\\\\\\"alert('checking if the first character for admin\\\\\\\\'s password is digit \\\\\\\\'7\\\\\\\\' (true in case of same result(s) as for \\\\\\\\'vulnerable\\\\\\\\')')\\\", \\\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection#boolean-exploitation-technique\\\"), (\\\"Blind SQL Injection (<i>time</i>)\\\", \\\"?id=2\\\", \\\"/?id=(SELECT%20(CASE%20WHEN%20(SUBSTR((SELECT%20password%20FROM%20users%20WHERE%20name%3D%27admin%27)%2C2%2C1)%3D%27e%27)%20THEN%20(LIKE(%27ABCDEFG%27%2CUPPER(HEX(RANDOMBLOB(300000000)))))%20ELSE%200%20END))\\\\\\\" onclick=\\\\\\\"alert('checking if the second character for admin\\\\\\\\'s password is letter \\\\\\\\'e\\\\\\\\' (true in case of delayed response)')\\\", \\\"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-I\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","c8de29bee1ed205fdd40fd73ff244dfce05bbc07934eded6bd95696d6258c3a7":"{\"title\": \"sqlalchemy-execute-raw-query\", \"loc\": \"dsvw.py:30\", \"severity\": \"error\", \"details\": \"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query\\nAvoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\\nSnippet:\\n                    cursor.execute(\\\"SELECT id, username, name, surname FROM users WHERE id=\\\" + params[\\\"id\\\"])\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","12e8bafa35d2c28bbed2480c6f9e690d68e3639e1f488b99b712a0f8a96c3750":"{\"title\": \"avoid-pickle\", \"loc\": \"dsvw.py:35\", \"severity\": \"warning\", \"details\": \"python.lang.security.deserialization.pickle.avoid-pickle\\nAvoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\\nSnippet:\\n                    content = str(pickle.loads(params[\\\"object\\\"].encode()))\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","52ae81b4cc710ea80710ae957a025d7b838afee0648100baf20add593bbde860":"{\"title\": \"dynamic-urllib-use-detected\", \"loc\": \"dsvw.py:37\", \"severity\": \"warning\", \"details\": \"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\\nDetected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\\nSnippet:\\n                    content = (open(os.path.abspath(params[\\\"path\\\"]), \\\"rb\\\") if not \\\"://\\\" in params[\\\"path\\\"] else urllib.request.urlopen(params[\\\"path\\\"])).read().decode()\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","7e119cd977c27ae21ff81fede8c8a057147008d823513ee04c39799b3c2adec2":"{\"title\": \"subprocess-shell-true\", \"loc\": \"dsvw.py:39\", \"severity\": \"error\", \"details\": \"python.lang.security.audit.subprocess-shell-true.subprocess-shell-true\\nFound 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.\\nSnippet:\\n                    content = subprocess.check_output(\\\"nslookup \\\" + params[\\\"domain\\\"], shell=True, stderr=subprocess.STDOUT, stdin=subprocess.PIPE).decode()\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","878c066222be7800782f476a550ba5a7ab33f2cc72a087c6c61933373a4cad70":"{\"title\": \"formatted-sql-query\", \"loc\": \"dsvw.py:50\", \"severity\": \"warning\", \"details\": \"python.lang.security.audit.formatted-sql-query.formatted-sql-query\\nDetected possible formatted SQL query. Use parameterized queries instead.\\nSnippet:\\n                        cursor.execute(\\\"INSERT INTO comments VALUES(NULL, '%s', '%s')\\\" % (params[\\\"comment\\\"], time.ctime()))\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","55759fb1536adf4b5806665ed2d33a30d2deebb4d70e270bbcc8d0381c61129f":"{\"title\": \"sqlalchemy-execute-raw-query\", \"loc\": \"dsvw.py:50\", \"severity\": \"error\", \"details\": \"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query\\nAvoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\\nSnippet:\\n                        cursor.execute(\\\"INSERT INTO comments VALUES(NULL, '%s', '%s')\\\" % (params[\\\"comment\\\"], time.ctime()))\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","9e3bf8d65c9b87d202db44e32b3cdfadb54d1947bdfa7ebf5d8cda33496cfebc":"{\"title\": \"dynamic-urllib-use-detected\", \"loc\": \"dsvw.py:56\", \"severity\": \"warning\", \"details\": \"python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected\\nDetected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.\\nSnippet:\\n                    backup, sys.stdout, program, envs = sys.stdout, io.StringIO(), (open(params[\\\"include\\\"], \\\"rb\\\") if not \\\"://\\\" in params[\\\"include\\\"] else urllib.request.urlopen(params[\\\"include\\\"])).read(), {\\\"DOCUMENT_ROOT\\\": os.getcwd(), \\\"HTTP_USER_AGENT\\\": self.headers.get(\\\"User-Agent\\\"), \\\"REMOTE_ADDR\\\": self.client_address[0], \\\"REMOTE_PORT\\\": self.client_address[1], \\\"PATH\\\": path, \\\"QUERY_STRING\\\": query}\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","8f140382d5aa24fdd49bbb122cab08398c80d666b4f38cb19909ff6fdf16e13a":"{\"title\": \"exec-detected\", \"loc\": \"dsvw.py:57\", \"severity\": \"warning\", \"details\": \"python.lang.security.audit.exec-detected.exec-detected\\nDetected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources.\\nSnippet:\\n                    exec(program, envs)\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}","9bc4fa22c7084c8bff80758ba81f15ea85f6a1a4394745b698f117f2745fb561":"{\"title\": \"sqlalchemy-execute-raw-query\", \"loc\": \"dsvw.py:67\", \"severity\": \"error\", \"details\": \"python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query\\nAvoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.\\nSnippet:\\n                cursor.execute(\\\"SELECT * FROM users WHERE username='\\\" + re.sub(r\\\"[^\\\\w]\\\", \\\"\\\", params.get(\\\"username\\\", \\\"\\\")) + \\\"' AND password='\\\" + params.get(\\\"password\\\", \\\"\\\") + \\\"'\\\")\", \"timestamp\": 1755053914.1328592, \"tool\": \"semgrep\"}"}